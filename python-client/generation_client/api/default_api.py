from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from generation_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def actual_generations_per_type(self, **kwargs):  # noqa: E501
        """001  # noqa: E501

        This resource is for retrieving data about actual generation aggregated by sector on an intradaily basis for net generation injected into the network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.001(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Forecast search start date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param datetime end_date: Forecast search end date (YYYY-MM-DDThh:mm:sszzzzzz)
        :return: ActualGenerationsPerProductionTypeObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.actual_generations_per_type_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.actual_generations_per_type_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def actual_generations_per_type_with_http_info(self, **kwargs):  # noqa: E501
        """001  # noqa: E501

        This resource is for retrieving data about actual generation aggregated by sector on an intradaily basis for net generation injected into the network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.001_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Forecast search start date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param datetime end_date: Forecast search end date (YYYY-MM-DDThh:mm:sszzzzzz)
        :return: ActualGenerationsPerProductionTypeObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["start_date", "end_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method 001" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "start_date" in params:
            query_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            query_params.append(("end_date", params["end_date"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/actual_generations_per_production_type",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ActualGenerationsPerProductionTypeObj",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def actual_generations_per_unit(self, **kwargs):  # noqa: E501
        """002  # noqa: E501

        This resource is for retrieving data about actual generation aggregated by unit on an intradaily basis. Data about actual generation is put together for the upcoming hour using measurements taken remotely on RTE's network. It relates to net generation injected into the network. For units that are not generating, this figure can be negative as a result of the site’s consumption.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.002(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Search start date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param datetime end_date: Search end date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param str unit_eic_code: Unit's EIC code
        :return: ActualGenerationsPerUnitObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.actual_generations_per_unit_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.actual_generations_per_unit_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def actual_generations_per_unit_with_http_info(self, **kwargs):  # noqa: E501
        """002  # noqa: E501

        This resource is for retrieving data about actual generation aggregated by unit on an intradaily basis. Data about actual generation is put together for the upcoming hour using measurements taken remotely on RTE's network. It relates to net generation injected into the network. For units that are not generating, this figure can be negative as a result of the site’s consumption.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.002_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Search start date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param datetime end_date: Search end date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param str unit_eic_code: Unit's EIC code
        :return: ActualGenerationsPerUnitObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["start_date", "end_date", "unit_eic_code"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method 002" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "start_date" in params:
            query_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            query_params.append(("end_date", params["end_date"]))  # noqa: E501
        if "unit_eic_code" in params:
            query_params.append(
                ("unit_eic_code", params["unit_eic_code"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/actual_generations_per_unit",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ActualGenerationsPerUnitObj",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def water_reserves(self, **kwargs):  # noqa: E501
        """003  # noqa: E501

        This resource is for retrieving data about hydraulic stocks. Hydraulic stocks for France are the aggregated weekly fill rates of reservoirs and lake-type hydraulic storage plants as recorded on Monday at 0.00 AM. They are expressed in MWh and sent by the generators to RTE, which then aggregates the data before publishing it. This data is published on Wednesdays at 12:30 PM, or the day after if Wednesday is a bank holiday.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.003(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Forecast search start date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param datetime end_date: Forecast search end date (YYYY-MM-DDThh:mm:sszzzzzz)
        :return: WaterReservesObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.water_reserves_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.water_reserves_with_http_info(**kwargs)  # noqa: E501
            return data

    def water_reserves_with_http_info(self, **kwargs):  # noqa: E501
        """003  # noqa: E501

        This resource is for retrieving data about hydraulic stocks. Hydraulic stocks for France are the aggregated weekly fill rates of reservoirs and lake-type hydraulic storage plants as recorded on Monday at 0.00 AM. They are expressed in MWh and sent by the generators to RTE, which then aggregates the data before publishing it. This data is published on Wednesdays at 12:30 PM, or the day after if Wednesday is a bank holiday.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.003_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Forecast search start date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param datetime end_date: Forecast search end date (YYYY-MM-DDThh:mm:sszzzzzz)
        :return: WaterReservesObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["start_date", "end_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method 003" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "start_date" in params:
            query_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            query_params.append(("end_date", params["end_date"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/water_reserves",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WaterReservesObj",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def generation_mix(self, **kwargs):  # noqa: E501
        """004  # noqa: E501

        This resource is for retrieving data about actual power generated from the overall power mix, which corresponds to net generation injected into the network. Unlike the 'actual_generations_per_production_type' resource, which returned an average for data taken over an hour, the values that this resource retrieves are discrete values every 15 minutes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.004(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Forecast search start date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param datetime end_date: Forecast search end date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param list[str] production_type: Generating sector
        :param list[str] production_subtype: Generating sub-sector
        :return: GenerationMix15minTimeScaleObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.generation_mix_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generation_mix_with_http_info(**kwargs)  # noqa: E501
            return data

    def generation_mix_with_http_info(self, **kwargs):  # noqa: E501
        """004  # noqa: E501

        This resource is for retrieving data about actual power generated from the overall power mix, which corresponds to net generation injected into the network. Unlike the 'actual_generations_per_production_type' resource, which returned an average for data taken over an hour, the values that this resource retrieves are discrete values every 15 minutes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.004_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Forecast search start date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param datetime end_date: Forecast search end date (YYYY-MM-DDThh:mm:sszzzzzz)
        :param list[str] production_type: Generating sector
        :param list[str] production_subtype: Generating sub-sector
        :return: GenerationMix15minTimeScaleObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "start_date",
            "end_date",
            "production_type",
            "production_subtype",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method 004" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "start_date" in params:
            query_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            query_params.append(("end_date", params["end_date"]))  # noqa: E501
        if "production_type" in params:
            query_params.append(
                ("production_type", params["production_type"])
            )  # noqa: E501
            collection_formats["production_type"] = "multi"  # noqa: E501
        if "production_subtype" in params:
            query_params.append(
                ("production_subtype", params["production_subtype"])
            )  # noqa: E501
            collection_formats["production_subtype"] = "multi"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/generation_mix_15min_time_scale",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GenerationMix15minTimeScaleObj",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
