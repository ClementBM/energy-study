# coding: utf-8

"""
    Actual Generation

    Generation data aggregated by sector and produced per group (in MW) on an intradaily basis for net generation injected into the network. This data is produced by RTE using remote measurement facilities with which production units are equipped, and using an estimate model for the wind-power and photovoltaic sectors. Hydraulic stocks for France are the aggregated weekly fill rates of reservoirs and lake-type hydraulic storage plants; they are expressed in MWh and sent by the generators to RTE.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from generation_client.configuration import Configuration


class UnitActualGenerationsPerUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eic_code': 'str',
        'name': 'str'
    }

    attribute_map = {
        'eic_code': 'eic_code',
        'name': 'name'
    }

    def __init__(self, eic_code=None, name=None, _configuration=None):  # noqa: E501
        """UnitActualGenerationsPerUnit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._eic_code = None
        self._name = None
        self.discriminator = None

        if eic_code is not None:
            self.eic_code = eic_code
        if name is not None:
            self.name = name

    @property
    def eic_code(self):
        """Gets the eic_code of this UnitActualGenerationsPerUnit.  # noqa: E501

        Unit's EIC code  # noqa: E501

        :return: The eic_code of this UnitActualGenerationsPerUnit.  # noqa: E501
        :rtype: str
        """
        return self._eic_code

    @eic_code.setter
    def eic_code(self, eic_code):
        """Sets the eic_code of this UnitActualGenerationsPerUnit.

        Unit's EIC code  # noqa: E501

        :param eic_code: The eic_code of this UnitActualGenerationsPerUnit.  # noqa: E501
        :type: str
        """

        self._eic_code = eic_code

    @property
    def name(self):
        """Gets the name of this UnitActualGenerationsPerUnit.  # noqa: E501

        Name of the unit  # noqa: E501

        :return: The name of this UnitActualGenerationsPerUnit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UnitActualGenerationsPerUnit.

        Name of the unit  # noqa: E501

        :param name: The name of this UnitActualGenerationsPerUnit.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnitActualGenerationsPerUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnitActualGenerationsPerUnit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UnitActualGenerationsPerUnit):
            return True

        return self.to_dict() != other.to_dict()
