# coding: utf-8

"""
    Actual Generation

    Generation data aggregated by sector and produced per group (in MW) on an intradaily basis for net generation injected into the network. This data is produced by RTE using remote measurement facilities with which production units are equipped, and using an estimate model for the wind-power and photovoltaic sectors. Hydraulic stocks for France are the aggregated weekly fill rates of reservoirs and lake-type hydraulic storage plants; they are expressed in MWh and sent by the generators to RTE.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from generation_client.configuration import Configuration


class GenerationMix15minTimeScaleObj(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generation_mix_15min_time_scale': 'list[GenerationMix15minTimeScale]'
    }

    attribute_map = {
        'generation_mix_15min_time_scale': 'generation_mix_15min_time_scale'
    }

    def __init__(self, generation_mix_15min_time_scale=None, _configuration=None):  # noqa: E501
        """GenerationMix15minTimeScaleObj - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._generation_mix_15min_time_scale = None
        self.discriminator = None

        if generation_mix_15min_time_scale is not None:
            self.generation_mix_15min_time_scale = generation_mix_15min_time_scale

    @property
    def generation_mix_15min_time_scale(self):
        """Gets the generation_mix_15min_time_scale of this GenerationMix15minTimeScaleObj.  # noqa: E501


        :return: The generation_mix_15min_time_scale of this GenerationMix15minTimeScaleObj.  # noqa: E501
        :rtype: list[GenerationMix15minTimeScale]
        """
        return self._generation_mix_15min_time_scale

    @generation_mix_15min_time_scale.setter
    def generation_mix_15min_time_scale(self, generation_mix_15min_time_scale):
        """Sets the generation_mix_15min_time_scale of this GenerationMix15minTimeScaleObj.


        :param generation_mix_15min_time_scale: The generation_mix_15min_time_scale of this GenerationMix15minTimeScaleObj.  # noqa: E501
        :type: list[GenerationMix15minTimeScale]
        """

        self._generation_mix_15min_time_scale = generation_mix_15min_time_scale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerationMix15minTimeScaleObj, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerationMix15minTimeScaleObj):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerationMix15minTimeScaleObj):
            return True

        return self.to_dict() != other.to_dict()
